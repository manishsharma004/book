openapi: 3.0.0
servers: []
info:
  description: |
    Declare Funtion as a Service framework
    [http://github.com](http://github.com)
  version: "1.0.0"
  title: Function as a Service
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: faas
    description: Function as a Service
    externalDocs:
      description: Framework to define Funtion as a Service
      url: 'http://swagger.io'
  - name: faas
    description: Register a FaaS
  - name: function
    description: A registered function
    externalDocs:
      description: Functions registerd
      url: 'http://github.com'
paths:
  /function:
    post:
      tags:
        - function
      summary: Add a new function to the function server
      operationId: addFunction
      responses:
        '405':
          description: Invalid input
      security:
        - functionstore_auth:
            - 'write:functions'
            - 'read:functions'
      requestBody:
        $ref: '#/components/requestBodies/Function'
    put:
      tags:
        - function
      summary: Update an existing function
      operationId: updateFunction
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Function not found
        '405':
          description: Validation exception
      security:
        - functionstore_auth:
            - 'write:functions'
            - 'read:functions'
      requestBody:
        $ref: '#/components/requestBodies/Function'
  /function/find:
    get:
      tags:
        - function
      summary: Finds the function
      description: Functions can be found by name
      operationId: findFunction
      parameters:
        - name: name
          in: query
          description: Status values that need to be considered for filter
          required: true
          explode: true
          schema:
            type: array
            items:
              type: string
              enum:
                - available
                - pending
                - sold
              default: available
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Function'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Function'
        '400':
          description: Invalid status value
      security:
        - functionstore_auth:
            - 'write:functions'
            - 'read:functions'
  /function/findByTags:
    get:
      tags:
        - function
      summary: Finds Functions by tags
      description: >-
        Muliple tags can be provided with comma separated strings. Use\ \ tag1,
        tag2, tag3 for testing.
      operationId: findFunctionsByTags
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: true
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Function'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Function'
        '400':
          description: Invalid tag value
      security:
        - functionstore_auth:
            - 'write:functions'
            - 'read:functions'
      deprecated: true
  '/function/{functionId}':
    get:
      tags:
        - function
      summary: Find function by ID
      description: Returns a single function
      operationId: getFunctionById
      parameters:
        - name: functionId
          in: path
          description: ID of function to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Function'
            application/xml:
              schema:
                $ref: '#/components/schemas/Function'
        '400':
          description: Invalid ID supplied
        '404':
          description: Function not found
      security:
        - api_key: []
    post:
      tags:
        - function
      summary: Updates a function in the store with form data
      operationId: updateFunctionWithForm
      parameters:
        - name: functionId
          in: path
          description: ID of function that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '405':
          description: Invalid input
      security:
        - functionstore_auth:
            - 'write:functions'
            - 'read:functions'
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  description: Updated name of the function
                  type: string
                status:
                  description: Updated status of the function
                  type: string
    delete:
      tags:
        - function
      summary: Deletes a function
      operationId: deleteFunction
      parameters:
        - name: api_key
          in: header
          required: false
          schema:
            type: string
        - name: functionId
          in: path
          description: Function id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Function not found
      security:
        - functionstore_auth:
            - 'write:functions'
            - 'read:functions'
  '/function/{functionId}/uploadImage':
    post:
      tags:
        - function
      summary: uploads an image
      operationId: uploadFile
      parameters:
        - name: functionId
          in: path
          description: ID of function to update
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - functionstore_auth:
            - 'write:functions'
            - 'read:functions'
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
  /store/inventory:
    get:
      tags:
        - store
      summary: Returns function inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
        - api_key: []
  /store/order:
    post:
      tags:
        - store
      summary: Place an order for a function
      operationId: placeOrder
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid Order
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        description: order placed for purchasing the function
        required: true
  '/store/order/{orderId}':
    get:
      tags:
        - store
      summary: Find purchase order by ID
      description: >-
        For valid response try integer IDs with value >= 1 and <= 10.\ \ Other
        values will generated exceptions
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of function that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
            maximum: 10
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
    delete:
      tags:
        - store
      summary: Delete purchase order by ID
      description: >-
        For valid response try integer IDs with positive integer value.\ \
        Negative or non-integer values will generate API errors
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        functionId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
          default: false
      xml:
        name: Order
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Category
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
    Function:
      type: object
      required:
        - name
        - photoUrls
      properties:
        id:
          type: integer
          format: int64
        category:
          $ref: '#/components/schemas/Category'
        name:
          type: string
          example: doggie
        photoUrls:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
        tags:
          type: array
          xml:
            name: tag
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: function status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: Function
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  requestBodies:
    Function:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Function'
        application/xml:
          schema:
            $ref: '#/components/schemas/Function'
      description: Function object that needs to be added to the store
      required: true
    api_key:
      type: apiKey
      name: api_key
      in: header